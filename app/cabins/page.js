import { Suspense } from "react";
import CabinList from "../_components/CabinList.js";
import Spinner from "../_components/Spinner.js";
import Filter from "../_components/Filter.js";
import ReservationReminder from "../_components/ReservationReminder.js";

export const revalidate = 3600; // in sec ;

export const metadata = {
  title: "Cabins",
};

// We need to pass the state from the client component to the server component in order to filter the cabins ; for this we will be using a trick to store the state in the url.
// Problem with  this searchParams is that it can also be not known at runtime, which means  when we use searchParams , the page cannot be statically rendered.
// The revalidation of cache now, no longer takes any effect as the page wil always be dynamically rendered and cache revalidation only works for static pages generated by SSG
// we can only read the searchParams prop in page.js
// Whenever search params changes , the page will be re rendered and the server component will be updated with the new search params.
export default function Page({ searchParams }) {
  // console.log(searchParams);

  const filter = searchParams?.capacity ?? "all";

  // we ll be moving all the data fetching into it's own component and then wrap it with a suspense boundary for a granular strategy of streaming data.
  // since the below comp did not depend on data fetching,we moved that to separate comp and then wrap it with a suspense ; convention in nextjs

  return (
    <div>
      <h1 className="text-4xl mb-5 text-accent-400 font-medium">
        Our Modern Cabins
      </h1>
      <p className="text-primary-200 text-lg mb-10">
        Cozy yet luxurious cabins, located right in the heart of the Italian
        Dolomites. Imagine waking up to beautiful mountain views, spending your
        days exploring the dark forests around, or just relaxing in your private
        hot tub under the stars. Enjoy nature&#39;s beauty in your own little
        home away from home. The perfect spot for a peaceful, calm vacation.
        Welcome to paradise.
      </p>

      <div className="flex justify-end mb-8">
        <Filter />
      </div>

      {/* Loading.js file has been overwritten by this suspense boundary written here. */}
      {/* Problem : No Loading spinner was shown here and fallback was not shown. Soln : All page navigations are already wrapped in transitions in next which implies fallback will not be re rendered. */}
      {/* For this we need to pass in the unique key in order to re render the fallback */}
      <Suspense fallback={<Spinner />} key={filter}>
        <CabinList filter={filter} />
        <ReservationReminder />
      </Suspense>
    </div>
  );
}

// Each page in nextjs is a react component (react server component) that we export from a page.js file

// All the components whether a client or a server component are rendered on the server on the initial render and then sent as html to
